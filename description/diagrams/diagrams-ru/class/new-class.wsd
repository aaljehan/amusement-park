@startuml
Посетитель " 1..* " <-- " 1 " Парк: клиент
Посетитель " 1..* " <-- " +люди\n 1..* " Аттракцион: клиент
Парк " 1 " o-- " +аттракционы\n 1..*" Аттракцион
Контроллер ..> Посетитель: <<use>>
Симуляция_парка_развлечений ..> Парк: <<create>>
Симуляция_парка_развлечений ..> Аттракцион: <<create>>
Симуляция_парка_развлечений ..> Контроллер: <<create>>
Контроллер " 1 " --> " 1 " Парк: парк

class Посетитель << (D, OrangeRed) Data >>  {
    + зарплата: int
    + id: int
}

class Парк {
    + бюджет: int
    + цена_билета: int
    + список_посетителей_на_главной_аллее: list
    - удалить_посетителя_из_списка_главной_аллеи(): void
}

class Аттракцион {
    - количество_мест: int
    - время_сеанса: int
    - прошедшее_время_сеанса: int
    + цена_аттракциона: int
    + название_аттракциона(string): name
    + очередь_посетителей_на_аттракцион: list
    + список_посетителей_на_аттракционе: list
    - удалить_посетителя_из_очереди(): void
    + аттракцион(string, int): string
}

class Симуляция_парка_развлечений << (I,Indigo) Injector >> {
+ инициализация(): void
+ создать_UI(): void
+ создать_управление_парком(): void
+ создать_управление_посетителями(): void
+ создать_управление_аттракционами(): void
+ создать_управление_продажами_билетов(): void
+ создать_управление_продажами_аттракционов(): void
+ создать_управление_главной_аллеей(): void
+ создать_Управление_использованием_аттракциона(): void
}


class Контроллер << (C,#a4e8e0) >> {
    + создать_посетителя(): void
    + удалить_посетителя(): void
    + создать_аттракцион(): void
    + удалить_аттракцион(): void
    + переместить_посетителя_на_аттракцион(): void
    + удалить_посетителя_из_парка(): void
    + список_посетителей(int, int): void
    + список_аттракционов(name): list
}
@enduml